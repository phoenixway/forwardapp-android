–ë–∞—á—É –ø—Ä–æ–±–ª–µ–º—É! –í–∞—à `dragHandle` –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —á–µ–∫–∞—î –Ω–∞ **long press**, –∞–ª–µ —Ü–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—î –∑ `anchoredDraggable`, —è–∫–∏–π –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î –ø–æ–¥—ñ—ó **–æ–¥—Ä–∞–∑—É** –Ω–∞ `awaitFirstDown`. –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é.

## –†—ñ—à–µ–Ω–Ω—è: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `awaitDragOrCancellation` –∑–∞–º—ñ—Å—Ç—å `awaitLongPressOrCancellation`–¢–µ–ø–µ—Ä –¥–æ–¥–∞–º–æ **–≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä** –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è —ñ –¥–æ–¥–∞–º–æ **clickable false** –¥–æ `IconButton`:–¢–µ–ø–µ—Ä **–∫—Ä–∏—Ç–∏—á–Ω–∞ –∑–º—ñ–Ω–∞** - –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è —â–æ `InteractiveListItem` –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—î —Å—Ç–∞–Ω–∏:–¢–µ–ø–µ—Ä –Ω–∞–π–∫—Ä–∏—Ç–∏—á–Ω—ñ—à–∞ –∑–º—ñ–Ω–∞ - **–¥–æ–¥–∞–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ `SwipeableListItem`** —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —á–∏ `anchoredDraggable` –≤–∑–∞–≥–∞–ª—ñ –æ—Ç—Ä–∏–º—É—î –ø–æ–¥—ñ—ó:## –ö—Ä–∏—Ç–∏—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ –≤–∑–∞–≥–∞–ª—ñ `MoreActionsButton` –æ—Ç—Ä–∏–º—É—î –ø–æ–¥—ñ—ó

–î–æ–¥–∞–π—Ç–µ **—Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–¥** –≤ `BacklogView.kt`:## –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ –≥—ñ–ø–æ—Ç–µ–∑–∞ - –ø—Ä–æ–±–ª–µ–º–∞ –∑ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è–º –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞

–ú–æ–∂–ª–∏–≤–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º—É, —â–æ `dragHandleModifier` –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ `IconButton`, –∞ `IconButton` –º–∞—î –≤–ª–∞—Å–Ω—É –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ –∂–µ—Å—Ç—ñ–≤. –°–ø—Ä–æ–±—É—î–º–æ **–æ–±–µ—Ä–Ω—É—Ç–∏** –π–æ–≥–æ:## –ü—ñ–¥—Å—É–º–æ–∫ –∫—Ä–æ–∫—ñ–≤ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è:

1. **–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Å—Ç–æ—Å—É–π—Ç–µ `wrapper_solution`** - –æ–±–≥–æ—Ä—Ç–∫—É Box –Ω–∞–≤–∫–æ–ª–æ IconButton
2. **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–∏–π `DragHandleModifier.kt`** –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
3. **–ó–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫** —ñ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è –≤ Logcat —Ñ—ñ–ª—å—Ç—Ä `DRAG_HANDLE_DEBUG`

–Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ –ø—Ä–∞—Ü—é—î, –∑–∞—Å—Ç–æ—Å—É–π—Ç–µ **`test_button`** –∑–∞–º—ñ—Å—Ç—å MoreActionsButton —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤–∑–∞–≥–∞–ª—ñ –≤–∞—à–∞ –∑–æ–Ω–∞ –æ—Ç—Ä–∏–º—É—î –ø–æ–¥—ñ—ó.

## –Ø–∫—â–æ –Ω–∞–≤—ñ—Ç—å TestDragButton –Ω–µ —Å–ø—Ä–∞—Ü—é—î - –æ—Å—Ç–∞–Ω–Ω—è –≥—ñ–ø–æ—Ç–µ–∑–∞:

`SwipeableListItem` –º–æ–∂–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ **–í–°–Ü** –ø–æ–¥—ñ—ó —á–µ—Ä–µ–∑ —Å–≤—ñ–π `Box` –æ–±–≥–æ—Ä—Ç–∫—É. –í —Ç–∞–∫–æ–º—É —Ä–∞–∑—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:–°–ø—Ä–æ–±—É–π—Ç–µ –≤ —Ç–∞–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É:
1. ‚úÖ **wrapper_solution** (–Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏–π)
2. ‚úÖ **test_button** (–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
3. ‚úÖ **nuclear_option** (—è–∫—â–æ –≤—Å–µ —ñ–Ω—à–µ –Ω–µ –¥–æ–ø–æ–º–æ–∂–µ)

–Ø–∫–∏–π –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ö–æ—á–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É?

***

package com.romankozak.forwardappmobile.ui.dnd

import android.util.Log
import androidx.compose.foundation.gestures.awaitEachGesture
import androidx.compose.foundation.gestures.awaitFirstDown
import androidx.compose.foundation.gestures.drag
import androidx.compose.foundation.gestures.scrollBy
import androidx.compose.foundation.lazy.LazyListState
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.input.pointer.PointerEventPass
import androidx.compose.ui.input.pointer.PointerInputChange
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.input.pointer.positionChange
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlin.math.abs

private const val TAG = "DRAG_HANDLE_DEBUG"

fun Modifier.dragHandle(
    dragDropManager: DragDropManager,
    itemIndex: Int,
    lazyListState: LazyListState,
    scope: CoroutineScope,
    onDragStateChanged: (Boolean) -> Unit
): Modifier = this.pointerInput(itemIndex) {
    Log.d(TAG, "DragHandle pointerInput registered for item $itemIndex")
    
    awaitEachGesture {
        // –ö–†–ò–¢–ò–ß–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Initial pass —ñ requireUnconsumed = false
        val down = awaitFirstDown(requireUnconsumed = false, pass = PointerEventPass.Initial)
        Log.d(TAG, "‚úÖ DOWN detected on handle at index $itemIndex, position: ${down.position}")
        
        // –û–¥—Ä–∞–∑—É —Å–ø–æ–∂–∏–≤–∞—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è anchoredDraggable
        down.consume()
        onDragStateChanged(true)
        
        var totalDrag = Offset.Zero
        var dragStarted = false
        val dragThreshold = 15f // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä—É—Ö –¥–ª—è –ø–æ—á–∞—Ç–∫—É –¥—Ä–∞–≥—É (—É –ø—ñ–∫—Å–µ–ª—è—Ö)
        
        try {
            // –ß–µ–∫–∞—î–º–æ –Ω–∞ —Ä—É—Ö –ø–∞–ª—å—Ü—è
            val firstDrag = drag(down.id) { change ->
                Log.d(TAG, "DRAG motion detected, delta: ${change.positionChange()}")
                totalDrag += change.positionChange()
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ø–æ—Ä—ñ–≥
                if (!dragStarted && totalDrag.getDistance() > dragThreshold) {
                    Log.d(TAG, "üöÄ DRAG threshold exceeded! Starting drag for item $itemIndex")
                    dragStarted = true
                    
                    val itemInfo = lazyListState.layoutInfo.visibleItemsInfo
                        .firstOrNull { it.index == itemIndex }
                    
                    if (itemInfo != null) {
                        val initialItemOffset = itemInfo.offset
                        val dragOffsetInItem = change.position.y - initialItemOffset
                        
                        dragDropManager.onDragStart(
                            offset = change.position,
                            index = itemInfo.index,
                            initialItemOffset = initialItemOffset,
                            dragOffsetInItem = dragOffsetInItem
                        )
                    } else {
                        Log.e(TAG, "‚ùå ItemInfo not found for index $itemIndex")
                    }
                }
                
                if (dragStarted) {
                    change.consume()
                    dragDropManager.onDrag(change.position)
                    
                    // Autoscroll
                    handleAutoScroll(
                        scope = scope,
                        lazyListState = lazyListState,
                        containerHeight = size.height.toFloat(),
                        pointerY = change.position.y
                    )
                }
                
                dragStarted // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —è–∫—â–æ –¥—Ä–∞–≥ –∞–∫—Ç–∏–≤–Ω–∏–π
            }
            
            if (dragStarted) {
                Log.d(TAG, "Drag gesture completed for item $itemIndex")
                dragDropManager.onDragEnd()
            } else {
                Log.d(TAG, "Gesture ended without reaching drag threshold (was tap or small movement)")
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error in drag gesture: ${e.message}", e)
        } finally {
            onDragStateChanged(false)
            Log.d(TAG, "DragHandle state reset for item $itemIndex")
        }
    }
}

private var autoScrollJob: Job? = null

private fun handleAutoScroll(
    scope: CoroutineScope,
    lazyListState: LazyListState,
    containerHeight: Float,
    pointerY: Float
) {
    autoScrollJob?.cancel()
    
    val topThreshold = containerHeight * 0.15f
    val bottomThreshold = containerHeight * 0.85f
    
    when {
        pointerY < topThreshold -> {
            val scrollSpeed = ((topThreshold - pointerY) / topThreshold * 30f).coerceIn(5f, 40f)
            autoScrollJob = scope.launch {
                while (true) {
                    lazyListState.scrollBy(-scrollSpeed)
                    delay(16)
                }
            }
        }
        pointerY > bottomThreshold -> {
            val scrollSpeed = ((pointerY - bottomThreshold) / (containerHeight - bottomThreshold) * 30f).coerceIn(5f, 40f)
            autoScrollJob = scope.launch {
                while (true) {
                    lazyListState.scrollBy(scrollSpeed)
                    delay(16)
                }
            }
        }
        else -> {
            autoScrollJob?.cancel()
            autoScrollJob = null
        }
    }
}

***

package com.romankozak.forwardappmobile.ui.screens.projectscreen.components.dnd

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.DragHandle
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp

private const val TAG = "MORE_ACTIONS_BUTTON"

@Composable
fun MoreActionsButton(
    isDragging: Boolean,
    onMoreClick: () -> Unit,
    modifier: Modifier = Modifier,
    dragHandleModifier: Modifier = Modifier
) {
    Log.d(TAG, "MoreActionsButton composing, isDragging=$isDragging")
    
    IconButton(
        onClick = {
            if (!isDragging) {
                Log.d(TAG, "onClick triggered (not dragging)")
                onMoreClick()
            } else {
                Log.d(TAG, "onClick blocked (currently dragging)")
            }
        },
        enabled = !isDragging, // –ö–†–ò–¢–ò–ß–ù–û: –í–∏–º–∏–∫–∞—î–º–æ –∫–ª—ñ–∫–∏ –ø—ñ–¥ —á–∞—Å –¥—Ä–∞–≥—É
        modifier = modifier
            .then(dragHandleModifier)
            // –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è (–º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ç—ñ–º)
            .background(if (isDragging) Color.Yellow.copy(alpha = 0.3f) else Color.Transparent)
            .border(2.dp, Color.Red.copy(alpha = 0.5f)) // –ß–µ—Ä–≤–æ–Ω–∞ —Ä–∞–º–∫–∞ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    ) {
        Icon(
            imageVector = if (isDragging) Icons.Default.DragHandle else Icons.Default.MoreVert,
            contentDescription = if (isDragging) "Drag handle" else "More actions",
            tint = if (isDragging) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurface
        )
    }
}

***

package com.romankozak.forwardappmobile.ui.screens.projectscreen.components.dnd

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.DragHandle
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp

private const val TAG = "MORE_ACTIONS_BUTTON"

@Composable
fun MoreActionsButton(
    isDragging: Boolean,
    onMoreClick: () -> Unit,
    modifier: Modifier = Modifier,
    dragHandleModifier: Modifier = Modifier
) {
    Log.d(TAG, "MoreActionsButton composing, isDragging=$isDragging")
    
    IconButton(
        onClick = {
            if (!isDragging) {
                Log.d(TAG, "onClick triggered (not dragging)")
                onMoreClick()
            } else {
                Log.d(TAG, "onClick blocked (currently dragging)")
            }
        },
        enabled = !isDragging, // –ö–†–ò–¢–ò–ß–ù–û: –í–∏–º–∏–∫–∞—î–º–æ –∫–ª—ñ–∫–∏ –ø—ñ–¥ —á–∞—Å –¥—Ä–∞–≥—É
        modifier = modifier
            .then(dragHandleModifier)
            // –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è (–º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ç—ñ–º)
            .background(if (isDragging) Color.Yellow.copy(alpha = 0.3f) else Color.Transparent)
            .border(2.dp, Color.Red.copy(alpha = 0.5f)) // –ß–µ—Ä–≤–æ–Ω–∞ —Ä–∞–º–∫–∞ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    ) {
        Icon(
            imageVector = if (isDragging) Icons.Default.DragHandle else Icons.Default.MoreVert,
            contentDescription = if (isDragging) "Drag handle" else "More actions",
            tint = if (isDragging) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurface
        )
    }
}

***

// –î–æ–¥–∞–π—Ç–µ —Ü—ñ –∑–º—ñ–Ω–∏ –≤ SwipeableListItem.kt

// –í –ø–æ—á–∞—Ç–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó SwipeableListItem, –ø—ñ—Å–ª—è key(resetTrigger) {
Log.d("SWIPEABLE_DEBUG", "SwipeableListItem: swipeEnabled=$swipeEnabled, isDragging=$isDragging, isAnyItemDragging=$isAnyItemDragging")

// –í Surface –∑–∞–º—ñ–Ω—ñ—Ç—å –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –Ω–∞ —Ü–µ–π:
Surface(
    modifier = surfaceModifier
        .then(
            if (swipeEnabled && !isDragging && !isAnyItemDragging) {
                Log.d("SWIPEABLE_DEBUG", "Applying anchoredDraggable")
                Modifier.anchoredDraggable(
                    state = swipeState,
                    orientation = Orientation.Horizontal,
                    enabled = true,
                )
            } else {
                Log.d("SWIPEABLE_DEBUG", "Skipping anchoredDraggable (disabled)")
                Modifier
            }
        ),
    color = backgroundColor,
    shape = dynamicShape,
    tonalElevation = if (abs(offset) > 10f) 4.dp else 0.dp,
) {
    content()
}

// –¢–∞–∫–æ–∂ –¥–æ–¥–∞–π—Ç–µ –≤ SwipeState confirmValueChange:
confirmValueChange = { newValue ->
    Log.d("SWIPEABLE_DEBUG", "confirmValueChange called: newValue=$newValue, swipeEnabled=$swipeEnabled")
    if (!swipeEnabled || isDragging || isAnyItemDragging) {
        Log.d("SWIPEABLE_DEBUG", "Rejecting change - conditions not met")
        return@AnchoredDraggableState false
    }
    // ... —Ä–µ—à—Ç–∞ –∫–æ–¥—É
}

***

// –î–æ–¥–∞–π—Ç–µ —Ü–µ–π —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ó–ê–ú–Ü–°–¢–¨ MoreActionsButton —Ç–∏–º—á–∞—Å–æ–≤–æ

@Composable
fun TestDragButton(
    itemIndex: Int,
    dragDropManager: com.romankozak.forwardappmobile.ui.dnd.DragDropManager,
    lazyListState: androidx.compose.foundation.lazy.LazyListState,
    scope: CoroutineScope,
    onDragStateChanged: (Boolean) -> Unit
) {
    var tapCount by remember { mutableStateOf(0) }
    
    Box(
        modifier = Modifier
            .size(48.dp)
            .background(Color.Red)
            .pointerInput(Unit) {
                awaitEachGesture {
                    val down = awaitFirstDown(requireUnconsumed = false, pass = PointerEventPass.Initial)
                    Log.d("TEST_BUTTON", "üî• TAP DETECTED on item $itemIndex at ${down.position}")
                    tapCount++
                    down.consume()
                }
            }
            .dragHandle(
                dragDropManager = dragDropManager,
                itemIndex = itemIndex,
                lazyListState = lazyListState,
                scope = scope,
                onDragStateChanged = onDragStateChanged
            ),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = tapCount.toString(),
            color = Color.White,
            style = MaterialTheme.typography.bodyLarge
        )
    }
}

// –í BacklogView.kt –∑–∞–º—ñ–Ω—ñ—Ç—å MoreActionsButton –Ω–∞:
endAction = {
    TestDragButton(
        itemIndex = index,
        dragDropManager = dragDropManager,
        lazyListState = listState,
        scope = scope,
        onDragStateChanged = { isDragHandleActive = it }
    )
}

***

package com.romankozak.forwardappmobile.ui.screens.projectscreen.components.dnd

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.size
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.DragHandle
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp

private const val TAG = "MORE_ACTIONS_BUTTON"

@Composable
fun MoreActionsButton(
    isDragging: Boolean,
    onMoreClick: () -> Unit,
    modifier: Modifier = Modifier,
    dragHandleModifier: Modifier = Modifier
) {
    Log.d(TAG, "MoreActionsButton composing, isDragging=$isDragging")
    
    // –ö–†–ò–¢–ò–ß–ù–ê –ó–ú–Ü–ù–ê: –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ dragHandle –¥–æ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ Box, –∞ –Ω–µ –¥–æ IconButton
    Box(
        modifier = modifier
            .size(48.dp)
            .then(dragHandleModifier) // dragHandle —Ç—É—Ç!
            .border(2.dp, Color.Green) // –ó–µ–ª–µ–Ω–∞ —Ä–∞–º–∫–∞ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
            .background(Color.Blue.copy(alpha = 0.1f)),
        contentAlignment = Alignment.Center
    ) {
        IconButton(
            onClick = {
                if (!isDragging) {
                    Log.d(TAG, "onClick triggered")
                    onMoreClick()
                } else {
                    Log.d(TAG, "onClick blocked (dragging)")
                }
            },
            enabled = !isDragging,
            modifier = Modifier.size(48.dp)
        ) {
            Icon(
                imageVector = if (isDragging) Icons.Default.DragHandle else Icons.Default.MoreVert,
                contentDescription = if (isDragging) "Drag handle" else "More actions",
                tint = if (isDragging) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurface
            )
        }
    }
}

***

// –Ø–∫—â–æ –í–°–ï —ñ–Ω—à–µ –Ω–µ —Å–ø—Ä–∞—Ü—é—î - –∑–∞—Å—Ç–æ—Å—É–π—Ç–µ —Ü–µ–π –ø—ñ–¥—Ö—ñ–¥

@Composable
fun InteractiveListItem(
    // ... –≤—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    dragDropManager: DragDropManager,
    lazyListState: LazyListState,
    scope: CoroutineScope,
) {
    // ... –≤–µ—Å—å —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥
    
    // –î–æ–¥–∞–π—Ç–µ –∑–º—ñ–Ω–Ω—É –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–æ–Ω–∏ —Ä—É—á–∫–∏
    var handleBounds by remember { mutableStateOf<androidx.compose.ui.geometry.Rect?>(null) }
    
    Box(
        modifier = Modifier
            .fillMaxWidth()
            // –ó–ê–°–¢–û–°–û–í–£–Ñ–ú–û DRAGHANDLE –¢–£–¢, –ù–ê –í–ï–†–•–ù–¨–û–ú–£ –†–Ü–í–ù–Ü
            .pointerInput(index, handleBounds) {
                awaitEachGesture {
                    val down = awaitFirstDown(requireUnconsumed = false, pass = PointerEventPass.Initial)
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–∞–ø –≤ –∑–æ–Ω—ñ —Ä—É—á–∫–∏
                    val isInHandleZone = handleBounds?.contains(down.position) ?: false
                    
                    if (isInHandleZone) {
                        Log.d("NUCLEAR", "Tap in handle zone!")
                        down.consume()
                        onDragStateChanged(true)
                        
                        // –õ–æ–≥—ñ–∫–∞ –¥—Ä–∞–≥—É...
                        var totalDrag = Offset.Zero
                        drag(down.id) { change ->
                            totalDrag += change.positionChange()
                            if (totalDrag.getDistance() > 15f) {
                                // –ü–æ—á–∏–Ω–∞—î–º–æ –¥—Ä–∞–≥
                                dragDropManager.onDragStart(...)
                            }
                            change.consume()
                        }
                        
                        dragDropManager.onDragEnd()
                        onDragStateChanged(false)
                    }
                }
            }
    ) {
        SwipeableListItem(...) {
            Row {
                Box(modifier = Modifier.weight(1f)) {
                    content(isDragging)
                }
                
                // MoreActionsButton –∑ onGloballyPositioned
                Box(
                    modifier = Modifier
                        .onGloballyPositioned { coordinates ->
                            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ bounds —Ä—É—á–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö InteractiveListItem
                            handleBounds = coordinates.boundsInParent()
                        }
                ) {
                    MoreActionsButton(...)
                }
            }
        }
    }
}
