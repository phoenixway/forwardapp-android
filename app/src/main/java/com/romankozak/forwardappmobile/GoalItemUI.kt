package com.romankozak.forwardappmobile

import android.content.ActivityNotFoundException
import android.content.Intent
import android.net.Uri
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.ClickableText
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Anchor
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.unit.dp
import com.romankozak.forwardappmobile.ui.components.CustomCheckbox
import java.net.URLEncoder
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

// --- (–∫–æ–¥ –∑ –ø–∞—Ä—Å–∏–Ω–≥–æ–º —ñ–∫–æ–Ω–æ–∫, —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º –¥–∞—Ç–∏ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ---

private enum class IconCategory {
    IMPORTANCE, SCALE, ACTIVITY, CUSTOM
}

private data class IconConfig(
    val icon: String,
    val markers: List<String>,
    val category: IconCategory,
)

private val ICON_CONFIGS: List<IconConfig> = listOf(
    IconConfig("üî•", listOf("#critical", "! ", "!"), IconCategory.IMPORTANCE),
    IconConfig("‚≠ê", listOf("#day", "+"), IconCategory.IMPORTANCE),
    IconConfig("üìå", listOf("#week", "++"), IconCategory.SCALE),
    IconConfig("üóìÔ∏è", listOf("#month"), IconCategory.SCALE),
    IconConfig("üéØ", listOf("#middle-term", "+++ "), IconCategory.SCALE),
    IconConfig("üî≠", listOf("#long-term", "~ ", "~"), IconCategory.SCALE),
    IconConfig("‚ú®", listOf("#str"), IconCategory.SCALE),
    IconConfig("üõ†Ô∏è", listOf("#manual"), IconCategory.ACTIVITY),
    IconConfig("üß†", listOf("#mental", "#pm"), IconCategory.ACTIVITY),
    IconConfig("üì±", listOf("#device"), IconCategory.ACTIVITY),
    IconConfig("üå´Ô∏è", listOf("#unclear"), IconCategory.CUSTOM),
)

private data class ParsedGoalData(
    val icons: List<IconConfig>,
    val mainText: String
)

private fun parseTextAndExtractIcons(text: String): ParsedGoalData {
    var currentText = text
    val foundIcons = mutableSetOf<IconConfig>()

    ICON_CONFIGS.forEach { config ->
        config.markers.forEach { marker ->
            val regex = Regex("(^|\\s)(${Regex.escape(marker)})(\\s|$)")
            if (regex.containsMatchIn(currentText)) {
                currentText = currentText.replace(regex, "$1$3")
                foundIcons.add(config)
            }
        }
    }
    currentText = currentText.replace(Regex("\\[icon::\\s*([^]]+?)\\s*]"), "")
    val sortedIcons = foundIcons.sortedBy { it.category.ordinal }
    val cleanedText = currentText.replace(Regex("\\s\\s+"), " ").trim()
    return ParsedGoalData(icons = sortedIcons, mainText = cleanedText)
}

fun formatDate(timestamp: Long): String {
    val date = Date(timestamp)
    val formatter = SimpleDateFormat("MMM dd yyyy", Locale.ENGLISH)
    return formatter.format(date)
}

@Composable
fun ParsedGoalText(
    text: String,
    modifier: Modifier = Modifier,
    isCompleted: Boolean,
    obsidianVaultName: String,
    onTagClick: (String) -> Unit
) {
    val context = LocalContext.current
    val tagColor = MaterialTheme.colorScheme.primary
    val projectColor = MaterialTheme.colorScheme.tertiary
    val linkColor = MaterialTheme.colorScheme.tertiary

    // ‚ú® –ó–ú–Ü–ù–ê: –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –≤ –æ–¥–∏–Ω –¥–ª—è —î–¥–∏–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥—É
    val combinedRegex = remember {
        Regex(
            // –ì—Ä—É–ø–∞ 1-3: Markdown (–∂–∏—Ä–Ω–∏–π, –∫—É—Ä—Å–∏–≤, –∑–∞–∫—Ä–µ—Å–ª–µ–Ω–∏–π)
            "(\\*\\*|__)(.*?)\\1" +       // **bold** –∞–±–æ __bold__
                    "|(\\*|_)(.*?)\\3" +          // *italic* –∞–±–æ _italic_
                    "|(~~)(.*?)\\5" +             // ~~strikethrough~~
                    // –ì—Ä—É–ø–∞ 7-9: –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è Obsidian
                    "|(\\[\\[)(.*?)(?:\\|(.*?))?]]" +
                    // –ì—Ä—É–ø–∞ 10-11: –¢–µ–≥–∏ —Ç–∞ –ø—Ä–æ–µ–∫—Ç–∏
                    "|([#@])(\\p{L}[\\p{L}0-9_-]*\\b)"
        )
    }

    val annotatedString = buildAnnotatedString {
        var lastIndex = 0
        for (match in combinedRegex.findAll(text)) {
            // –î–æ–¥–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∑–Ω–∞–π–¥–µ–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º
            if (match.range.first > lastIndex) {
                append(text.substring(lastIndex, match.range.first))
            }

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —â–æ —Å–∞–º–µ –º–∏ –∑–Ω–∞–π—à–ª–∏, —ñ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∏–ª—å
            val (content, style, annotation) = when {
                // –ñ–∏—Ä–Ω–∏–π
                match.groups[2] != null -> Triple(match.groups[2]!!.value, SpanStyle(fontWeight = FontWeight.Bold), null)
                // –ö—É—Ä—Å–∏–≤
                match.groups[4] != null -> Triple(match.groups[4]!!.value, SpanStyle(fontStyle = FontStyle.Italic), null)
                // –ó–∞–∫—Ä–µ—Å–ª–µ–Ω–∏–π
                match.groups[6] != null -> Triple(match.groups[6]!!.value, SpanStyle(textDecoration = TextDecoration.LineThrough), null)
                // –ü–æ—Å–∏–ª–∞–Ω–Ω—è Obsidian
                match.groups[7] != null -> {
                    val linkTarget = match.groups[8]!!.value
                    val linkText = match.groups[9]?.value
                    val displayText = if (!linkText.isNullOrEmpty()) linkText else linkTarget
                    Triple(displayText, SpanStyle(color = linkColor, textDecoration = TextDecoration.Underline), "OBSIDIAN_LINK" to linkTarget)
                }
                // –¢–µ–≥–∏/–ü—Ä–æ–µ–∫—Ç–∏
                match.groups[10] != null -> {
                    val tagSymbol = match.groups[10]!!.value
                    val tagName = match.groups[11]!!.value
                    val fullTag = "$tagSymbol$tagName"
                    val tagStyle = when (tagSymbol) {
                        "#" -> SpanStyle(color = tagColor, fontWeight = FontWeight.SemiBold)
                        "@" -> SpanStyle(color = projectColor, fontWeight = FontWeight.Medium)
                        else -> SpanStyle()
                    }
                    Triple(fullTag, tagStyle, "SEARCH_TERM" to fullTag)
                }
                else -> Triple("", SpanStyle(), null)
            }

            // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å—Ç–∏–ª—å —ñ –∞–Ω–æ—Ç–∞—Ü—ñ—é (—è–∫—â–æ —î)
            if (annotation != null) {
                pushStringAnnotation(annotation.first, annotation.second)
            }
            withStyle(style = style) {
                append(content)
            }
            if (annotation != null) {
                pop()
            }

            lastIndex = match.range.last + 1
        }
        // –î–æ–¥–∞—î–º–æ –∑–∞–ª–∏—à–æ–∫ —Ç–µ–∫—Å—Ç—É, —è–∫—â–æ –≤—ñ–Ω —î
        if (lastIndex < text.length) {
            append(text.substring(lastIndex))
        }
    }

    ClickableText(
        text = annotatedString,
        style = MaterialTheme.typography.bodyLarge.copy(
            color = if (isCompleted) MaterialTheme.colorScheme.onSurfaceVariant else MaterialTheme.colorScheme.onSurface,
            textDecoration = if (isCompleted) TextDecoration.None else null
        ),
        modifier = modifier,
        onClick = { offset ->
            annotatedString.getStringAnnotations("SEARCH_TERM", start = offset, end = offset)
                .firstOrNull()?.let { onTagClick(it.item) }
            annotatedString.getStringAnnotations("OBSIDIAN_LINK", start = offset, end = offset)
                .firstOrNull()?.let { annotation ->
                    val noteName = annotation.item
                    if (obsidianVaultName.isNotBlank()) {
                        try {
                            val encodedVault = URLEncoder.encode(obsidianVaultName, "UTF-8")
                            val encodedFile = URLEncoder.encode(noteName, "UTF-8")
                            val uri = Uri.parse("obsidian://open?vault=$encodedVault&file=$encodedFile")
                            val intent = Intent(Intent.ACTION_VIEW, uri)
                            context.startActivity(intent)
                        } catch (e: ActivityNotFoundException) {
                            Toast.makeText(context, "Obsidian –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", Toast.LENGTH_SHORT).show()
                        } catch (e: Exception) {
                            Toast.makeText(context, "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è.", Toast.LENGTH_SHORT).show()
                        }
                    } else {
                        Toast.makeText(context, "–ù–∞–∑–≤–∞ Obsidian Vault –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.", Toast.LENGTH_LONG).show()
                    }
                }
        }
    )
}

@OptIn(ExperimentalLayoutApi::class)
@Composable
fun GoalItem(
    goal: Goal,
    associatedLists: List<GoalList>,
    obsidianVaultName: String,
    onToggle: () -> Unit,
    onItemClick: () -> Unit,
    onTagClick: (String) -> Unit,
    onAssociatedListClick: (String) -> Unit,
    backgroundColor: Color,
    modifier: Modifier = Modifier,
    dragHandle: @Composable (() -> Unit)? = null
) {
    val parsedData = remember(goal.text) { parseTextAndExtractIcons(goal.text) }

    Column(
        modifier = modifier
            .fillMaxWidth()
            .clickable(onClick = onItemClick)
            .background(backgroundColor)
    ) {
        Row(
            modifier = Modifier.padding(horizontal = 8.dp, vertical = 12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            CustomCheckbox(
                checked = goal.completed,
                onCheckedChange = { onToggle() }
            )
            Spacer(modifier = Modifier.width(8.dp))
            Column(
                modifier = Modifier.weight(1f),
            ) {
                // –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —Ü—ñ–ª—ñ (—Ç–µ–ø–µ—Ä –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Markdown)
                ParsedGoalText(
                    text = parsedData.mainText,
                    isCompleted = goal.completed,
                    obsidianVaultName = obsidianVaultName,
                    onTagClick = onTagClick
                )

                // –†—è–¥–æ–∫ –∑—ñ —Å—Ç–∞—Ç—É—Å–Ω–∏–º–∏ —ñ–∫–æ–Ω–∫–∞–º–∏ —Ç–∞ –∞—Å–æ—Ü—ñ–π–æ–≤–∞–Ω–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏
                val hasStatusContent = parsedData.icons.isNotEmpty() || associatedLists.isNotEmpty()
                if (hasStatusContent) {
                    Spacer(modifier = Modifier.height(10.dp))
                    FlowRow(
                        horizontalArrangement = Arrangement.spacedBy(8.dp),
                        verticalArrangement = Arrangement.spacedBy(6.dp),
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        // –†–µ–Ω–¥–µ—Ä–∏–º–æ —Å—Ç–∞—Ç—É—Å–Ω—ñ —ñ–∫–æ–Ω–∫–∏
                        parsedData.icons.forEach { iconData ->
                            Text(
                                text = iconData.icon,
                                style = MaterialTheme.typography.labelMedium,
                                modifier = Modifier.align(Alignment.CenterVertically)
                            )
                        }

                        // –†–µ–Ω–¥–µ—Ä–∏–º–æ –∞—Å–æ—Ü—ñ–π–æ–≤–∞–Ω—ñ —Å–ø–∏—Å–∫–∏ –±–µ–∑ —ñ–∫–æ–Ω–∫–∏ —è–∫–æ—Ä—è
                        associatedLists.forEach { list ->
                            Box(
                                modifier = Modifier
                                    .clip(RoundedCornerShape(8.dp))
                                    .background(MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.6f))
                                    .clickable { onAssociatedListClick(list.id) }
                                    .padding(horizontal = 8.dp, vertical = 4.dp),
                            ) {
                                Text(
                                    text = list.name,
                                    style = MaterialTheme.typography.labelMedium,
                                    color = MaterialTheme.colorScheme.onSurface
                                )
                            }
                        }
                    }
                }
            }

            if (dragHandle != null) {
                Spacer(modifier = Modifier.width(4.dp))
                dragHandle()
            }
        }
        Divider(color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.5f))
    }
}
