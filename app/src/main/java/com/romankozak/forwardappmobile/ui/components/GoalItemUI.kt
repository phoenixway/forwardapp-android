package com.romankozak.forwardappmobile.ui.components

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.combinedClickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ElectricBolt
import androidx.compose.material.icons.filled.FlashOff // ‚ú® –î–û–î–ê–ù–û: –Ü–∫–æ–Ω–∫–∞ –¥–ª—è "–Ω–µ–º–æ–∂–ª–∏–≤–æ –æ—Ü—ñ–Ω–∏—Ç–∏"
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.romankozak.forwardappmobile.data.database.models.Goal
import com.romankozak.forwardappmobile.data.database.models.GoalList
import com.romankozak.forwardappmobile.data.database.models.ScoringStatus // ‚ú® –î–û–î–ê–ù–û: –Ü–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç—É—Å—É
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

// --- –î–æ–ø–æ–º—ñ–∂–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —ñ–∫–æ–Ω–æ–∫ ---
private enum class IconCategory { IMPORTANCE, SCALE, ACTIVITY, CUSTOM }
private data class IconConfig(val icon: String, val markers: List<String>, val category: IconCategory)
private val ICON_CONFIGS: List<IconConfig> = listOf(
    IconConfig("üî•", listOf("#critical", "! ", "!"), IconCategory.IMPORTANCE),
    IconConfig("‚≠ê", listOf("#day", "+"), IconCategory.IMPORTANCE),
    IconConfig("üìå", listOf("#week", "++"), IconCategory.SCALE),
    IconConfig("üóìÔ∏è", listOf("#month"), IconCategory.SCALE),
    IconConfig("üéØ", listOf("#middle-term", "+++ "), IconCategory.SCALE),
    IconConfig("üî≠", listOf("#long-term", "~ ", "~"), IconCategory.SCALE),
    IconConfig("‚ú®", listOf("#str"), IconCategory.SCALE),
    IconConfig("üõ†Ô∏è", listOf("#manual"), IconCategory.ACTIVITY),
    IconConfig("üß†", listOf("#mental", "#pm"), IconCategory.ACTIVITY),
    IconConfig("üì±", listOf("#device"), IconCategory.ACTIVITY),
    IconConfig("üî¨", listOf("#research"), IconCategory.CUSTOM), // ‚ú® –î–û–î–ê–ù–û
    IconConfig("üå´Ô∏è", listOf("#unclear"), IconCategory.CUSTOM),
)
private data class ParsedGoalData(val icons: List<IconConfig>, val mainText: String)
private fun parseTextAndExtractIcons(text: String): ParsedGoalData {
    var currentText = text
    val foundIcons = mutableSetOf<IconConfig>()
    ICON_CONFIGS.forEach { config ->
        config.markers.forEach { marker ->
            val regex = Regex("(^|\\s)(${Regex.escape(marker)})(\\s|$)")
            if (regex.containsMatchIn(currentText)) {
                currentText = currentText.replace(regex, "$1$3")
                foundIcons.add(config)
            }
        }
    }
    currentText = currentText.replace(Regex("\\[icon::\\s*([^]]+?)\\s*]"), "")
    val sortedIcons = foundIcons.sortedBy { it.category.ordinal }
    val cleanedText = currentText.replace(Regex("\\s\\s+"), " ").trim()
    return ParsedGoalData(icons = sortedIcons, mainText = cleanedText)
}
fun formatDate(timestamp: Long): String {
    val date = Date(timestamp)
    val formatter = SimpleDateFormat("d MMM yyyy, HH:mm", Locale.getDefault())
    return formatter.format(date)
}


@OptIn(ExperimentalLayoutApi::class, ExperimentalFoundationApi::class) // ‚ú® –ó–ú–Ü–ù–ê: –î–æ–¥–∞–Ω–æ ExperimentalFoundationApi
@Composable
fun GoalItem(
    goal: Goal,
    associatedLists: List<GoalList>,
    obsidianVaultName: String,
    onToggle: () -> Unit,
    onItemClick: () -> Unit,
    onLongClick: () -> Unit, // ‚ú® –ó–ú–Ü–ù–ê: –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–æ–≤–≥–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    onTagClick: (String) -> Unit,
    onAssociatedListClick: (String) -> Unit,
    backgroundColor: Color,
    modifier: Modifier = Modifier,
    dragHandle: @Composable (() -> Unit)? = null
) {
    val parsedData = remember(goal.text) { parseTextAndExtractIcons(goal.text) }

    Column(
        modifier = modifier
            .fillMaxWidth()
            // ‚ú® –ó–ú–Ü–ù–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ combinedClickable –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —ñ –¥–æ–≤–≥–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
            .combinedClickable(
                onClick = onItemClick,
                onLongClick = onLongClick
            )
            .background(backgroundColor)
    ) {
        val contentAlpha = if (goal.completed) 0.5f else 1.0f

        Row(
            modifier = Modifier
                .padding(start = 8.dp, end = 8.dp, top = 8.dp, bottom = 8.dp)
                .alpha(contentAlpha), // ‚ú® –ó–ê–°–¢–û–°–û–í–£–Ñ–ú–û –ü–†–û–ó–û–†–Ü–°–¢–¨
            verticalAlignment = Alignment.CenterVertically
        ) {
            CustomCheckbox(
                checked = goal.completed,
                onCheckedChange = { onToggle() },
                checkedColor = MaterialTheme.colorScheme.primary,
                uncheckedColor = Color.Transparent, // –í–Ω—É—Ç—Ä—ñ—à–Ω—è —á–∞—Å—Ç–∏–Ω–∞ –±—É–¥–µ –ø—Ä–æ–∑–æ—Ä–æ—é
                borderColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f), // –ë–ª—ñ–¥–∞ —Ä–∞–º–∫–∞
                checkmarkColor = MaterialTheme.colorScheme.onPrimary // –ö–æ–ª—ñ—Ä –≥–∞–ª–æ—á–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
            )
            Spacer(modifier = Modifier.width(8.dp))
            Column(
                modifier = Modifier.weight(1f),
            ) {
                MarkdownText(
                    text = parsedData.mainText,
                    isCompleted = goal.completed,
                    obsidianVaultName = obsidianVaultName,
                    onTagClick = onTagClick,
                    onTextClick = onItemClick,
                    style = MaterialTheme.typography.bodyLarge,
                    onLongClick = onLongClick
                )

                // ‚ú® –ó–ú–Ü–ù–ê: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–µ–ø–µ—Ä –≤—Ä–∞—Ö–æ–≤—É—î scoringStatus
                val hasStatusContent = goal.scoringStatus != ScoringStatus.NOT_ASSESSED || parsedData.icons.isNotEmpty() || associatedLists.isNotEmpty()
                if (hasStatusContent) {
                    Spacer(modifier = Modifier.height(10.dp))
                    FlowRow(
                        horizontalArrangement = Arrangement.spacedBy(8.dp),
                        verticalArrangement = Arrangement.spacedBy(6.dp),
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        // ‚ú® –ó–ú–Ü–ù–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
                        ScoreStatusBadge(goal = goal)

                        parsedData.icons.forEach { iconData ->
                            Text(
                                text = iconData.icon,
                                style = MaterialTheme.typography.labelMedium,
                                modifier = Modifier.align(Alignment.CenterVertically)
                            )
                        }

                        associatedLists.forEach { list ->
                            Box(
                                modifier = Modifier
                                    .clip(RoundedCornerShape(8.dp))
                                    .background(MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.6f))
                                    .clickable { onAssociatedListClick(list.id) }
                                    .padding(horizontal = 8.dp, vertical = 4.dp),
                            ) {
                                Text(
                                    text = list.name,
                                    style = MaterialTheme.typography.labelMedium,
                                    color = MaterialTheme.colorScheme.onSurface
                                )
                            }
                        }
                    }
                }
            }

            if (dragHandle != null) {
                Spacer(modifier = Modifier.width(4.dp))
                dragHandle()
            }
        }
        Divider(color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.5f))
    }
}

/**
 * ‚ú® –ù–û–í–ò–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –æ—Ü—ñ–Ω–∫–∏ —Ü—ñ–ª—ñ.
 */
@Composable
private fun ScoreStatusBadge(goal: Goal) {
    when (goal.scoringStatus) {
        ScoringStatus.ASSESSED -> {
            // –ü–æ–∫–∞–∑—É—î–º–æ –æ—Ü—ñ–Ω–∫—É, –ª–∏—à–µ —è–∫—â–æ –≤–æ–Ω–∞ –±—ñ–ª—å—à–∞ –∑–∞ –Ω—É–ª—å
            if (goal.displayScore > 0) {
                Box(
                    modifier = Modifier
                        .background(MaterialTheme.colorScheme.primary.copy(alpha = 0.1f), CircleShape)
                        .padding(horizontal = 8.dp, vertical = 4.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(4.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.ElectricBolt,
                            contentDescription = "–û—Ü—ñ–Ω–µ–Ω–æ",
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(14.dp)
                        )
                        Text(
                            text = "${goal.displayScore}/100",
                            style = MaterialTheme.typography.labelSmall,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.primary,
                        )
                    }
                }
            }
        }
        ScoringStatus.IMPOSSIBLE_TO_ASSESS -> {
            // –Ü–∫–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É "–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ü—ñ–Ω–∏—Ç–∏"
            Box(
                modifier = Modifier
                    .background(MaterialTheme.colorScheme.onSurface.copy(alpha = 0.1f), CircleShape)
                    .padding(horizontal = 8.dp, vertical = 4.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.FlashOff,
                    contentDescription = "–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ü—ñ–Ω–∏—Ç–∏",
                    tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                    modifier = Modifier.size(14.dp)
                )
            }
        }
        ScoringStatus.NOT_ASSESSED -> {
            // –ù—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ, —è–∫ —ñ –±—É–ª–æ –ø—Ä–æ—Ö–∞–Ω–Ω—è
        }
    }
}