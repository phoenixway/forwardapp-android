package com.romankozak.forwardappmobile.ui.components.listItemsRenderers

import android.util.Log
import androidx.compose.animation.animateColorAsState
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.combinedClickable
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Book
import androidx.compose.material.icons.filled.DragHandle
import androidx.compose.material.icons.filled.ElectricBolt
import androidx.compose.material.icons.filled.FlashOff
import androidx.compose.material.icons.filled.Link
import androidx.compose.material.icons.filled.ListAlt
import androidx.compose.material.icons.filled.Notes
import androidx.compose.material.icons.outlined.StickyNote2
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.romankozak.forwardappmobile.data.database.models.Goal
import com.romankozak.forwardappmobile.data.database.models.LinkType
import com.romankozak.forwardappmobile.data.database.models.RelatedLink
import com.romankozak.forwardappmobile.data.database.models.ScoringStatus
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

private data class ParsedGoalData(val icons: List<String>, val mainText: String)

// --- –í—Å—Ç–∞–≤—Ç–µ —Ü–µ–π –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥ —É —Ñ–∞–π–ª app/src/main/java/com/romankozak/forwardappmobile/ui/components/listItemsRenderers/GoalItem.kt ---

private fun parseTextAndExtractIcons(
    text: String,
    contextMarkerToEmojiMap: Map<String, String>
): ParsedGoalData {
    var currentText = text
    val foundIcons = mutableSetOf<String>()

    // –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω—É –º–∞–ø—É –≤—Å—ñ—Ö –º–∞—Ä–∫–µ—Ä—ñ–≤, –¥–µ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥–∞—î—Ç—å—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º
    val allMarkersToIcons = mutableMapOf<String, String>()

    // 1. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞—î–º–æ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω—ñ —ñ–∫–æ–Ω–∫–∏
    val hardcodedIconsData = mapOf(
        "üî•" to listOf("@critical", "! ", "!"),
        "‚≠ê" to listOf("@day", "+"),
        "üìå" to listOf("@week", "++"),
        "üóìÔ∏è" to listOf("@month"),
        "üéØ" to listOf("+++ "),
        "üî≠" to listOf("~ ", "~"),
        "‚ú®" to listOf("@str"),
        "üå´Ô∏è" to listOf("@unclear")
    )
    hardcodedIconsData.forEach { (icon, markers) ->
        markers.forEach { marker ->
            allMarkersToIcons[marker] = icon
        }
    }

    // 2. –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –µ–º–æ–¥–∑—ñ, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—é—á–∏ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω—ñ —É —Ä–∞–∑—ñ –∑–±—ñ–≥—É –º–∞—Ä–∫–µ—Ä—ñ–≤
    allMarkersToIcons.putAll(contextMarkerToEmojiMap)

    // 3. –°–æ—Ä—Ç—É—î–º–æ –º–∞—Ä–∫–µ—Ä–∏ –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é (–≤—ñ–¥ –Ω–∞–π–¥–æ–≤—à–æ–≥–æ), —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ (–Ω–∞–ø—Ä., "++" –æ–±—Ä–æ–±–∏—Ç–∏ —Ä–∞–Ω—ñ—à–µ, –Ω—ñ–∂ "+")
    val sortedMarkers = allMarkersToIcons.keys.sortedByDescending { it.length }

    sortedMarkers.forEach { marker ->
        val icon = allMarkersToIcons[marker] ?: return@forEach

        // –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ä–µ–≥—ñ—Å—Ç—Ä —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä—ñ–≤, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ "@"
        val regexOptions = if (marker.startsWith("@")) setOf(RegexOption.IGNORE_CASE) else emptySet()
        val regex = Regex("(?<=(^|\\s))${Regex.escape(marker)}(?=(\\s|$))", regexOptions)

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –º–∞—Ä–∫–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –º–æ–¥–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç
        if (regex.containsMatchIn(currentText)) {
            foundIcons.add(icon)
            // –ó–∞–º—ñ–Ω—é—î–º–æ –º–∞—Ä–∫–µ—Ä –Ω–∞ –ø—Ä–æ–±—ñ–ª, —â–æ–± –Ω–µ –∑'—î–¥–Ω—É–≤–∞—Ç–∏ —Å–ª–æ–≤–∞, —è–∫—ñ –±—É–ª–∏ –ø–æ –±–æ–∫–∞—Ö
            currentText = currentText.replace(regex, " ")
        }
    }

    // 4. –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –º–∞—Ä–∫–µ—Ä–∏ —ñ–∫–æ–Ω–æ–∫ —Ç–∞ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    currentText = currentText.replace(Regex("\\[icon::\\s*([^]]+?)\\s*]"), "")
    val cleanedText = currentText.replace(Regex("\\s+"), " ").trim()

    return ParsedGoalData(icons = foundIcons.toList(), mainText = cleanedText)
}

fun formatDate(timestamp: Long): String {
    val date = Date(timestamp)
    val formatter = SimpleDateFormat("d MMM yyyy, HH:mm", Locale.getDefault())
    return formatter.format(date)
}

@OptIn(ExperimentalLayoutApi::class, ExperimentalFoundationApi::class)
@Composable
fun GoalItem(
    goal: Goal,
    obsidianVaultName: String,
    onToggle: (Boolean) -> Unit,
    onItemClick: () -> Unit,
    onLongClick: () -> Unit,
    onTagClick: (String) -> Unit,
    onRelatedLinkClick: (RelatedLink) -> Unit,
    modifier: Modifier = Modifier,
    dragHandleModifier: Modifier = Modifier,
    emojiToHide: String? = null,
    contextMarkerToEmojiMap: Map<String, String>,
) {
    val parsedData = remember(goal.text, contextMarkerToEmojiMap) {
        parseTextAndExtractIcons(goal.text, contextMarkerToEmojiMap)
    }

    val targetColor = when {
        goal.completed -> MaterialTheme.colorScheme.surfaceVariant
        else -> MaterialTheme.colorScheme.surface
    }

    val background by animateColorAsState(
        targetValue = targetColor,
        label = "bgAnim"
    )

    Card(
        modifier = modifier
            .fillMaxWidth()
            .padding(horizontal = 8.dp, vertical = 4.dp),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = background),
        elevation = CardDefaults.elevatedCardElevation(1.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // –ó–û–ù–ê 1: –ö–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            Row(
                modifier = Modifier
                    .weight(1f)
                    .pointerInput(onItemClick, onLongClick) {
                        detectTapGestures(
                            onLongPress = { onLongClick() },
                            onTap = { onItemClick() }
                        )
                    }
                    .padding(horizontal = 12.dp, vertical = 8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                CustomCheckbox(
                    checked = goal.completed,
                    onCheckedChange = onToggle
                )

                Spacer(modifier = Modifier.width(12.dp))

                Column(modifier = Modifier.weight(1f)) {
                    MarkdownText(
                        text = parsedData.mainText,
                        isCompleted = goal.completed,
                        obsidianVaultName = obsidianVaultName,
                        onTagClick = onTagClick,
                        onTextClick = onItemClick,
                        onLongClick = onLongClick
                    )

                    // --- –ü–û–ß–ê–¢–û–ö –ó–ú–Ü–ù: –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ FlowRow –∑ —É—Å—ñ—î—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é ---
                    val hasStatusContent = goal.scoringStatus != ScoringStatus.NOT_ASSESSED ||
                            parsedData.icons.isNotEmpty() ||
                            !goal.description.isNullOrBlank() ||
                            !goal.relatedLinks.isNullOrEmpty()

                    if (hasStatusContent) {
                        Spacer(modifier = Modifier.height(10.dp))
                        FlowRow(
                            horizontalArrangement = Arrangement.spacedBy(8.dp),
                            verticalArrangement = Arrangement.spacedBy(6.dp),
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            // 1. –ë–µ–π–¥–∂ –∑ –æ—á–∫–∞–º–∏
                            ScoreStatusBadge(goal = goal)

                            // 2. –Ü–∫–æ–Ω–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ–≤ (@day, @week, etc.)
                            parsedData.icons
                                .filterNot { it == emojiToHide }
                                .forEach { icon ->
                                    Text(
                                        text = icon,
                                        style = MaterialTheme.typography.bodyLarge,
                                        fontSize = 16.sp,
                                        modifier = Modifier.align(Alignment.CenterVertically)
                                    )
                                }

                            // 3. –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–æ—Ç–∞—Ç–∫–∏ (–æ–ø–∏—Å—É)
                            if (!goal.description.isNullOrBlank()) {
                                Icon(
                                    imageVector = Icons.Outlined.StickyNote2,
                                    contentDescription = "Contains a note",
                                    tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                                    modifier = Modifier
                                        .size(16.dp)
                                        .align(Alignment.CenterVertically)
                                )
                            }

                            // 4. –ü–æ–≤'—è–∑–∞–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—É—á–∞—Å–Ω—ñ relatedLinks)
                            goal.relatedLinks?.forEach { link ->
                                RelatedLinkChip(link = link, onClick = { onRelatedLinkClick(link) })
                            }
                        }
                    }
                    // --- –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù ---
                }
            }

            // –ó–û–ù–ê 2: –†—É—á–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
            Box(
                modifier = Modifier
                    .fillMaxHeight()
                    .padding(end = 4.dp),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = Icons.Default.DragHandle,
                    contentDescription = "Drag to reorder",
                    tint = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = dragHandleModifier
                        .size(36.dp)
                        .pointerInput(Unit) { detectTapGestures { } }
                )
            }
        }
    }
}