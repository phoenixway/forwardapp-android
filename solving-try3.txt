Проблема в тому, що Room 2.6.1 має відомий баг з обробкою nullable enum полів при використанні KSP 2.x. Давайте спробуємо альтернативний підхід.

## Рішення: Використовуйте String із companion object

Замість enum використайте String константи. Це обходить баг KSP і працює надійно:Тепер створіть **оновлену версію DatabaseModel.kt** без enum `ReminderStatus` та **без TypeConverter для ProjectStatus**:Тепер **оновіть ReminderBroadcastReceiver** для роботи з String замість enum:## Покрокові інструкції:

### 1. Замініть DatabaseModel.kt
Використайте артефакт `database_model_fixed` вище. Ключові зміни:
- Всі enum поля в Entity замінені на String
- Створені object'и з константами замість enum
- TypeConverter залишився тільки для List та RelatedLink

### 2. Оновіть AppDatabase.kt

```kotlin
@Database(
    entities = [/* ... */],
    version = 45, // Збільште версію!
    exportSchema = true,
)
@TypeConverters(Converters::class, DailyPlanConverters::class)
abstract class AppDatabase : RoomDatabase() {
    // ...
}
```

### 3. Додайте міграцію (або fallback)

У вашому DI модулі де створюєте базу:

```kotlin
Room.databaseBuilder(context, AppDatabase::class.java, "app_database")
    .fallbackToDestructiveMigration() // Для розробки
    .build()
```

### 4. Глибоке очищення (КРИТИЧНО!)

```bash
# У terminal Android Studio:
./gradlew clean
./gradlew --stop

# Видаліть кеш KSP
rm -rf build/generated/ksp/
rm -rf app/build/generated/ksp/

# Invalidate Caches
# Android Studio → File → Invalidate Caches / Restart

# Після перезапуску:
./gradlew kspDebugKotlin --rerun-tasks
```

### 5. Оновіть ProjectRepository

Всі місця де використовували `ProjectStatus.NO_PLAN` замініть на `ProjectStatusValues.NO_PLAN`:

```kotlin
suspend fun updateProjectStatus(
    projectId: String,
    newStatus: String, // Замість ProjectStatus
    statusText: String?,
) {
    // ...
}
```

### Чому це працює?

Room 2.6.1 + KSP 2.x має баг з обробкою nullable enum полів. Використання String констант:
- ✅ Обходить баг KSP
- ✅ Працює швидше (немає серіалізації enum)
- ✅ Більш гнучке для міграцій
- ✅ Type-safe через константи в object

Це стандартний підхід в багатьох Android проєктах через проблеми Room з enum.


***

package com.romankozak.forwardappmobile.data.database.models

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.TypeConverter
import androidx.room.TypeConverters
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

// TypeConverters для складних типів (НЕ для enum!)
@TypeConverters(Converters::class)
class Converters {
    private val gson = Gson()
    private val pathSeparator = " / "

    @TypeConverter
    fun fromString(value: String?): List<String>? {
        return value?.split(pathSeparator)?.map { it.trim() }
    }

    @TypeConverter
    fun fromList(list: List<String>?): String? {
        return list?.joinToString(pathSeparator)
    }

    @TypeConverter
    fun fromRelatedLinkList(value: List<RelatedLink>?): String? {
        return gson.toJson(value)
    }

    @TypeConverter
    fun toRelatedLinkList(value: String?): List<RelatedLink>? {
        if (value.isNullOrEmpty()) {
            return null
        }
        val listType = object : TypeToken<List<RelatedLink>>() {}.type
        return gson.fromJson(value, listType)
    }
}

// Замість enum використовуємо String константи
object ProjectStatusValues {
    const val NO_PLAN = "NO_PLAN"
    const val PLANNING = "PLANNING"
    const val IN_PROGRESS = "IN_PROGRESS"
    const val COMPLETED = "COMPLETED"
    const val ON_HOLD = "ON_HOLD"
    const val PAUSED = "PAUSED"
    
    fun getDisplayName(status: String?): String {
        return when (status) {
            NO_PLAN -> "Без плану"
            PLANNING -> "Планується"
            IN_PROGRESS -> "В реалізації"
            COMPLETED -> "Завершено"
            ON_HOLD -> "Відкладено"
            PAUSED -> "На паузі"
            else -> "Без плану"
        }
    }
}

object ScoringStatusValues {
    const val NOT_ASSESSED = "NOT_ASSESSED"
    const val IMPOSSIBLE_TO_ASSESS = "IMPOSSIBLE_TO_ASSESS"
    const val ASSESSED = "ASSESSED"
}

object ProjectLogLevelValues {
    const val DETAILED = "DETAILED"
    const val NORMAL = "NORMAL"
}

object ProjectLogEntryTypeValues {
    const val STATUS_CHANGE = "STATUS_CHANGE"
    const val COMMENT = "COMMENT"
    const val AUTOMATIC = "AUTOMATIC"
    const val INSIGHT = "INSIGHT"
    const val MILESTONE = "MILESTONE"
}

// Enum які НЕ використовуються в Entity можна залишити
enum class ProjectViewMode { BACKLOG, INBOX, DASHBOARD, ATTACHMENTS }
enum class ListItemType { GOAL, SUBLIST, LINK_ITEM, NOTE, CUSTOM_LIST }
enum class LinkType { PROJECT, URL, OBSIDIAN }
enum class DayStatus { PLANNED, IN_PROGRESS, COMPLETED, MISSED, ARCHIVED }
enum class TaskPriority { 
    LOW, MEDIUM, HIGH, CRITICAL, NONE;
    fun getDisplayName(): String {
        return when (this) {
            LOW -> "Низький"
            MEDIUM -> "Середній"
            HIGH -> "Високий"
            CRITICAL -> "Критичний"
            NONE -> "Немає"
        }
    }
}
enum class TaskStatus { NOT_STARTED, IN_PROGRESS, COMPLETED, CANCELLED, DEFERRED }

data class RelatedLink(
    val type: LinkType?,
    val target: String,
    val displayName: String? = null,
)

@Entity(tableName = "link_items")
data class LinkItemEntity(
    @PrimaryKey val id: String,
    @ColumnInfo(name = "link_data")
    val linkData: RelatedLink,
    val createdAt: Long,
)

@Entity(tableName = "goals")
data class Goal(
    @PrimaryKey val id: String,
    val text: String,
    val description: String? = null,
    val completed: Boolean,
    val createdAt: Long,
    val updatedAt: Long?,
    val tags: List<String>? = null,
    val relatedLinks: List<RelatedLink>? = null,
    @ColumnInfo(defaultValue = "0.0") val valueImportance: Float = 0f,
    @ColumnInfo(defaultValue = "0.0") val valueImpact: Float = 0f,
    @ColumnInfo(defaultValue = "0.0") val effort: Float = 0f,
    @ColumnInfo(defaultValue = "0.0") val cost: Float = 0f,
    @ColumnInfo(defaultValue = "0.0") val risk: Float = 0f,
    @ColumnInfo(defaultValue = "1.0") val weightEffort: Float = 1f,
    @ColumnInfo(defaultValue = "1.0") val weightCost: Float = 1f,
    @ColumnInfo(defaultValue = "1.0") val weightRisk: Float = 1f,
    @ColumnInfo(defaultValue = "0.0") val rawScore: Float = 0f,
    @ColumnInfo(defaultValue = "0") val displayScore: Int = 0,
    @ColumnInfo(name = "scoring_status", defaultValue = "'NOT_ASSESSED'") 
    val scoringStatus: String = ScoringStatusValues.NOT_ASSESSED,
    @ColumnInfo(defaultValue = "0.0") val parentValueImportance: Float? = null,
    @ColumnInfo(defaultValue = "0.0") val impactOnParentGoal: Float? = null,
    @ColumnInfo(defaultValue = "0.0") val timeCost: Float? = null,
    @ColumnInfo(defaultValue = "0.0") val financialCost: Float? = null,
    @ColumnInfo(name = "reminder_time") val reminderTime: Long? = null,
)

@Entity(tableName = "reminder_info")
data class ReminderInfo(
    @PrimaryKey val goalId: String,
    @ColumnInfo(name = "reminder_status", defaultValue = "'ACTIVE'") 
    val reminderStatus: String = "ACTIVE",
    @ColumnInfo(name = "snooze_time") val snoozeTime: Long? = null,
)

@Entity(tableName = "projects")
data class Project(
    @PrimaryKey val id: String,
    val name: String,
    val description: String?,
    val parentId: String?,
    val createdAt: Long,
    val updatedAt: Long?,
    val tags: List<String>? = null,
    @ColumnInfo(name = "is_expanded", defaultValue = "1") val isExpanded: Boolean = true,
    @ColumnInfo(name = "goal_order", defaultValue = "0") val order: Long = 0,
    @ColumnInfo(name = "is_attachments_expanded", defaultValue = "0") val isAttachmentsExpanded: Boolean = false,
    @ColumnInfo(name = "default_view_mode") val defaultViewModeName: String? = ProjectViewMode.BACKLOG.name,
    @ColumnInfo(name = "is_completed", defaultValue = "0") val isCompleted: Boolean = false,
    @ColumnInfo(name = "is_project_management_enabled") val isProjectManagementEnabled: Boolean? = false,
    @ColumnInfo(name = "project_status", defaultValue = "'NO_PLAN'") 
    val projectStatus: String? = ProjectStatusValues.NO_PLAN,
    @ColumnInfo(name = "project_status_text") val projectStatusText: String? = null,
    @ColumnInfo(name = "project_log_level", defaultValue = "'NORMAL'") 
    val projectLogLevel: String? = ProjectLogLevelValues.NORMAL,
    @ColumnInfo(name = "total_time_spent_minutes") val totalTimeSpentMinutes: Long? = 0,
    @ColumnInfo(name = "reminder_time") val reminderTime: Long? = null,
    @ColumnInfo(defaultValue = "0.0") val valueImportance: Float = 0f,
    @ColumnInfo(defaultValue = "0.0") val valueImpact: Float = 0f,
    @ColumnInfo(defaultValue = "0.0") val effort: Float = 0f,
    @ColumnInfo(defaultValue = "0.0") val cost: Float = 0f,
    @ColumnInfo(defaultValue = "0.0") val risk: Float = 0f,
    @ColumnInfo(defaultValue = "1.0") val weightEffort: Float = 1f,
    @ColumnInfo(defaultValue = "1.0") val weightCost: Float = 1f,
    @ColumnInfo(defaultValue = "1.0") val weightRisk: Float = 1f,
    @ColumnInfo(defaultValue = "0.0") val rawScore: Float = 0f,
    @ColumnInfo(defaultValue = "0") val displayScore: Int = 0,
    @ColumnInfo(name = "scoring_status", defaultValue = "'NOT_ASSESSED'") 
    val scoringStatus: String = ScoringStatusValues.NOT_ASSESSED,
)

@Entity(tableName = "project_execution_logs")
data class ProjectExecutionLog(
    @PrimaryKey val id: String,
    @ColumnInfo(index = true) val projectId: String,
    val timestamp: Long,
    @ColumnInfo(name = "type") val type: String,
    val description: String,
    val details: String? = null,
)

@Entity(tableName = "inbox_records")
data class InboxRecord(
    @PrimaryKey val id: String,
    @ColumnInfo(index = true) val projectId: String,
    val text: String,
    val createdAt: Long,
    @ColumnInfo(name = "item_order") val order: Long,
)